{"version":3,"sources":["images/CPU.png","images/XOR.svg","images/NAND.svg","images/OR.svg","images/AND.svg","images/NOR.svg","images/NOT.svg","components/header/NavMenu.tsx","components/header/Header.tsx","components/main/Home.tsx","components/projects/Porjects.tsx","components/footer/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","NavMenu","Menu","id","open","Boolean","this","props","anchorEl","onClose","closeMenu","keepMounted","MenuItem","component","Link","to","onClick","React","Component","Header","setState","navMenu","openMenu","event","currentTarget","state","redirectToHome","className","IconButton","fontSize","Home","src","cpu","alt","xor","nand","or","and","nor","not","Projects","Button","variant","color","Footer","getCurrentYear","Date","getFullYear","App","exact","path","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.51f8b14c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/CPU.ddab6fdf.png\";","module.exports = __webpack_public_path__ + \"static/media/XOR.2c3ef8e2.svg\";","module.exports = __webpack_public_path__ + \"static/media/NAND.d40a919e.svg\";","module.exports = __webpack_public_path__ + \"static/media/OR.a8e14e91.svg\";","module.exports = __webpack_public_path__ + \"static/media/AND.c6f6a44d.svg\";","module.exports = __webpack_public_path__ + \"static/media/NOR.0d22d57d.svg\";","module.exports = __webpack_public_path__ + \"static/media/NOT.e990f80f.svg\";","import React from \"react\";\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Link } from 'react-router-dom';\n\nimport { INavMenuProps, INavMenuState } from \"../../interface/header/INavMenu\";\n\nexport default class NavMenu extends React.Component<INavMenuProps, INavMenuState> {\n \n  render() {\n    return (\n      <div>\n        <Menu\n          id=\"nav-menu\"\n          open={Boolean(this.props.anchorEl)}\n          anchorEl={this.props.anchorEl}\n          onClose={this.props.closeMenu}\n          keepMounted\n        >\n          <MenuItem \n            component={Link} \n            to=\"/projects\" onClick={this.props.closeMenu}\n          >\n            Projects\n          </MenuItem>\n        </Menu>\n      </div>\n    )\n  }\n}","import React from \"react\";\nimport \"../../styles/header/Header.scss\"\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuRoundedIcon from '@material-ui/icons/MenuRounded';\nimport ComputerRoundedIcon from '@material-ui/icons/ComputerRounded';\nimport { Link } from 'react-router-dom';\n\nimport NavMenu from \"./NavMenu\"\nimport { IHeaderProps, IHeaderState } from \"../../interface/header/IHeader\";\n\nexport default class Header extends React.Component<IHeaderProps, IHeaderState> {\n\n    constructor (props: IHeaderProps) {\n        super(props);\n        this.state = {\n            navMenu: <div />,\n            redirectToHome: false\n        }\n    }\n\n    private closeMenu = (): void => {\n        this.setState({\n            navMenu: <div />\n        })\n    }\n\n    private openMenu = (event: React.MouseEvent<HTMLButtonElement>):void => {\n        this.setState({\n            navMenu : <NavMenu anchorEl={event.currentTarget} closeMenu={this.closeMenu}/>\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"header\">\n                <section className=\"header__menu\">\n                    <IconButton onClick={this.openMenu}>\n                        <MenuRoundedIcon fontSize=\"large\" />\n                    </IconButton>\n                    {this.state.navMenu}\n                </section>\n                <Link className=\"header__tittle\" to=\"/\" >\n                    <div className=\"icon-name\">                        \n                        <ComputerRoundedIcon fontSize=\"large\"></ComputerRoundedIcon>\n                        <h1>\n                            Harman Kharoud\n                        </h1>\n                    </div>\n                </Link>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport \"../../styles/main/Home.scss\";\nimport cpu from \"../../images/CPU.png\";\n\nimport xor from \"../../images/XOR.svg\";\nimport nand from \"../../images/NAND.svg\";\nimport or from \"../../images/OR.svg\";\nimport and from \"../../images/AND.svg\";\nimport nor from \"../../images/NOR.svg\";\nimport not from \"../../images/NOT.svg\";\n\nexport default class Home extends React.Component {\n  render() {\n    return (\n      <div className=\"home\">\n        <section className=\"home__background\">\n          <img className=\"cpu\" src={cpu} alt=\"background\"></img>\n          <span>Discovering</span>\n          <span>new</span>\n          <span>neural</span>\n          <span>pathways</span>\n          <img className=\"gates xor\" src={xor} alt=\"xor\"></img>\n          <img className=\"gates nand\" src={nand} alt=\"xor\"></img>\n          <img className=\"gates or\" src={or} alt=\"xor\"></img>\n          <img className=\"gates and\" src={and} alt=\"xor\"></img>\n          <img className=\"gates nor\" src={nor} alt=\"xor\"></img>\n          <img className=\"gates not\" src={not} alt=\"xor\"></img>\n        </section>\n      </div>\n    )\n  }\n}","import React from \"react\";\nimport Button from \"@material-ui/core/Button\"\n\nexport default class Projects extends React.Component {\n    render() {\n        return (\n            <Button variant=\"contained\" color=\"secondary\">Hello Project!</Button>\n        )\n    }\n}","import React from \"react\";\nimport \"../../styles/footer/Footer.scss\"\n\nexport default class Footer extends React.Component {\n  private getCurrentYear = ():number => {\n    const date = new Date();\n    return date.getFullYear();\n  }\n  render() {\n    return (\n      <div className=\"footer\">\n        <section className=\"footer__website-name\">\n          <span>&copy; {this.getCurrentYear()} Harman Kharoud</span>\n        </section>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.scss';\n\nimport Header from \"./components/header/Header\";\nimport Home from \"./components/main/Home\";\nimport Projects from \"./components/projects/Porjects\"\nimport Footer from \"./components/footer/Footer\";\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <Header />\n          <div className=\"main-body\">\n            <Switch>\n              <Route exact path=\"/\" component={Home}></Route>\n              <Route exact path=\"/projects\" component={Projects}></Route>\n            </Switch>\n          </div>\n          <Footer/>\n        </Router>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}